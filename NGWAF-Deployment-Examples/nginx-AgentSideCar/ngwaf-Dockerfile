# Use build args for debian based distros
ARG IMAGE=debian
ARG LABEL=latest
FROM $IMAGE:$LABEL

# Get nginx/module args

# ARG NGINX_VERSION="1.22.0-1"
# ARG MODULE_VERSION="1.22.0-414"

ARG NGINX_VERSION="1.23.4-1"
ARG MODULE_VERSION="1.24.0-485"
ARG AGENT_VERSION="4.40.0"
ENV RUNLEVEL=1

# Set the working directory to /app
WORKDIR '/app'

# We want to minimise calling on binaries and installing extra packages.
# So we symlink bash to sh to source /etc/os-release to re-use.
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# We set "noninteractive" here rather than use an ENV because apt becomes interactive if someone wants to shell in and install something.
RUN DEBIAN_FRONTEND=noninteractive apt-get -qq update && \
    DEBIAN_FRONTEND=noninteractive apt-get -qq -y install gnupg2 \
                apt-utils \
                wget \
                curl \
                apt-transport-https \
                vim \
                ca-certificates \
                psmisc

# Add Nginx.
RUN source /etc/os-release && \
    curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor | tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null  && \
    \
    # Add NGINX Mainline
    echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/mainline/$ID $VERSION_CODENAME nginx" | tee /etc/apt/sources.list.d/nginx-mainline.list && \
    \
    # Add NGINX Stable
    echo "deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/$ID $VERSION_CODENAME nginx" | tee /etc/apt/sources.list.d/nginx-stable.list && \
    \
    # Only update the list files we added. Use shell expansion rather than call a binary.
    apt-get -qq update -o Dir::Etc::sourcelist="sources.list.d/nginx-stable.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" && \
    apt-get -qq update -o Dir::Etc::sourcelist="sources.list.d/nginx-mainline.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" && \
    # Pref nginx repo over ubuntu.
    echo "Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n" | tee /etc/apt/preferences.d/99nginx && \
        DEBIAN_FRONTEND=noninteractive apt-get -qq -y install nginx=${NGINX_VERSION}~$VERSION_CODENAME

# Add SigSci
RUN source /etc/os-release && \
    wget -qO - https://apt.signalsciences.net/release/gpgkey | gpg --dearmor -o /usr/share/keyrings/sigsci.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/sigsci.gpg] https://apt.signalsciences.net/release/$ID/ $VERSION_CODENAME main" | tee /etc/apt/sources.list.d/sigsci-release.list && \
    apt-get update && \
#    echo "deb https://apt.signalsciences.net/release/$ID $VERSION_CODENAME main" | awk '{print tolower($0)}' | tee /etc/apt/sources.list.d/sigsci-release.list && \
#    apt-get -qq update -o Dir::Etc::sourcelist="sources.list.d/sigsci-release.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" && \
    DEBIAN_FRONTEND=noninteractive apt-get -qq -y install sigsci-agent=${AGENT_VERSION} \
    nginx-module-sigsci-nxo=${MODULE_VERSION}

# Copy package.json to the working directory.
# Copy NGINX config
COPY config/* /etc/nginx/
COPY config/index.html /usr/share/nginx/html/index.html
COPY config/conf.d/default.conf /etc/nginx/conf.d/default.conf

# Copy NGWAF Agent specific configuration
COPY config/agent.conf /etc/sigsci/agent.conf
COPY entrypoint.sh .
RUN chmod 744 /app/entrypoint.sh

EXPOSE 80
STOPSIGNAL SIGQUIT

ENTRYPOINT ["/app/entrypoint.sh"]
